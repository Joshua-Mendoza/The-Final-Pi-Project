###########################################
## ACTUAL pins used
# left - 5
# right - 19
# up - 13
# down - 6
# --------------------
## TEST pins used (minor change so i knew how the setup worked
# up - 6
# down - 5
# left - 19
# right - 13
## movement test, using default sprite
###########################################

from Tkinter import *
from time import *

global S_SPD
global COUNT_LEN

class Sprite:
    def __init__(self, canvas, x1, y1, x2, y2):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.canvas = canvas
        self.sprite = canvas.create_oval(self.x1, self.y1, self.x2, self.y2, fill="white", outline="grey")

    def up(self):
        pos = canvas.coords(self.sprite)
        counter = 0
        while counter < COUNT_LEN:
            # move([item], [x speed], [y speed])
            self.canvas.move(self.sprite, 0, -S_SPD)
            self.canvas.after(20)
            self.canvas.update()
            counter += 1
        print "Your position is {}.".format(pos)

    def down(self):
        pos = canvas.coords(self.sprite)
        counter = 0
        while counter < COUNT_LEN:
            # move([item], [x speed], [y speed])
            self.canvas.move(self.sprite, 0, S_SPD)
            self.canvas.after(20)
            self.canvas.update()
            counter += 1
        print "Your position is {}.".format(pos)

    def left(self):
        pos = canvas.coords(self.sprite)
        counter = 0
        while counter < COUNT_LEN:
            # move([item], [x speed], [y speed])
            self.canvas.move(self.sprite, -S_SPD, 0)
            self.canvas.after(20)
            self.canvas.update()
            counter += 1
        print "Your position is {}.".format(pos)

    def right(self):
        pos = canvas.coords(self.sprite)
        counter = 0
        while counter < COUNT_LEN:
            # move([item], [x speed], [y speed])
            self.canvas.move(self.sprite, S_SPD, 0)
            self.canvas.after(20)
            self.canvas.update()
            counter += 1
        print "Your position is {}.".format(pos)

class Lines:
    def __init__(self, canvas, x1, y1, x2, y2, color):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.canvas = canvas
        self.line = canvas.create_line(self.x1, self.y1, self.x2, self.y2, fill=color, width=2)

root = Tk()
root.title("Movement Test")
root.resizable(False, False)
img = PhotoImage(file="maze.gif")

canvas = Canvas(root, width=500, height=500, background = "gray45")
canvas.pack()

sprite1 = Sprite(canvas, 343, 483, 350, 490)

def generateMaze(number, display, color):
    if display is True and number == 1:
        line1 = Lines(canvas, 300, 150, 300, 500, color)
        line2 = Lines(canvas, 400, 50, 400, 500, color)
        line3 = Lines(canvas, 225, 150, 300, 150, color)
        line4 = Lines(canvas, 5, 50, 400, 50, color)
        line5 = Lines(canvas, 225, 300, 225, 150, color)
        line6 = Lines(canvas, 150, 300, 225, 300, color)
        line7 = Lines(canvas, 150, 300, 150, 150, color)
        line8 = Lines(canvas, 5, 150, 150, 150, color)
    #elif display is True and number == 2:
        # maze two lines
    #elif display is True and number == 3:
        # maze three lines
    #elif display is True and number == 4:
        # maze four lines

generateMaze(1, True, "white")
# generateMaze(2, True, "gray42")
# generateMaze(3, True, "gray43")
# generateMaze(4, True, "gray44")

S_SPD = 10
COUNT_LEN = 2
####################################
# movement
def wmove(event):
    c = 0
    while c < 1:
        sprite1.up()
        c += 1
    print "ya just moved up"

def amove(event):
    c = 0
    while c < 1:
        sprite1.left()
        c += 1
    print "ya just moved left"

def smove(event):
    c = 0
    while c < 1:
        sprite1.down()
        c += 1
    print "ya just moved down"

def dmove(event):
    c = 0
    while c < 1:
        sprite1.right()
        c += 1
    print "ya just moved right"
####################################
# binding movement to wasd keys
root.bind("w", wmove)
root.bind("a", amove)
root.bind("s", smove)
root.bind("d", dmove)

root.mainloop()
